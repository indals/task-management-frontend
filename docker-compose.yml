version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: task_manager_db
    environment:
      POSTGRES_DB: task_management
      POSTGRES_USER: taskuser
      POSTGRES_PASSWORD: taskpass123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - task_manager_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskuser -d task_management"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: task_manager_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - task_manager_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: base
    container_name: task_manager_backend
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=True
      - DATABASE_URL=postgresql://taskuser:taskpass123@postgres:5432/task_management
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET_KEY=jwt-secret-key-change-in-production
      - CORS_ORIGINS=http://localhost:4200,http://127.0.0.1:4200
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - task_manager_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    command: ["python", "run.py", "--host", "0.0.0.0", "--port", "5000"]

  # Frontend Angular App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: task_manager_frontend
    ports:
      - "4200:4200"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    networks:
      - task_manager_network
    restart: unless-stopped

  # Nginx reverse proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: task_manager_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - task_manager_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_uploads:
    driver: local

networks:
  task_manager_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16